import random


maze =[
"0000000000000t00000000000000000000000000",
"0000000000000100000000000000000000000000",
"0000000000000100000000000000000000000000",
"0000000000000100000000000000000000000000",
"0000000000000100000000000000000000000000",
"0000000000011111110000000000000000000000",
"0000000000010001000000000000000000000000",
"0000000000010001111111111111111000000000",
"0000000001110000000100000000000000000000",
"0000000001000000000100000000000000000000",
"r111111111000000000100000000000000000000",
"0000000000000000000100000000000000000000",
"0000000000000000000100000000000000000000",
"0000000000000000000100000000000000000000",
"0000000000000000000100000000000000000000",
"0000000000000000000100000000000000000000",
"0000000000000000000100000000000000000000",
"0000000000000000000111111111100000000000",
"0000000000000000000000000010000000000000",
"0000000000000000000000000010000000000000",
"0000000001111111111111111111111111100000",
"0000000000000010000000000000000000000000",
"0000000000000010000000000000000000000000",
"0000000000000010000000000000000000000000",
"0000000000000010000000000000000000000000",
"0000000000000011111111111000000000000000",
"0000000000000010000000001000000000000000",
"0000000000000010000000001000000000000000",
"0000000000000000000000001000000000000000",
"0000000000000000000000001000000000000000",
"0000011111111111111111111000000000000000",
"0000010000000000000000000000000000000000",
"0000010000000000000000000000000000000000",
"0000010000000000000000000000000000000000",
"0000010000000000000000000001111111100000",
"0000010000000000000000000001000000000000",
"0111111111111111000000000001000000000000",
"0000000000000001000000000001000000000000",
"0000000000000001000000000001000000000000",
"0000000000000001111s11111111000000000000",
"0000000000000000000001000000000000000000",
"0000000000000000000001100000000000000000",
"0000000000000000000000100000000000000000",
"0000000000000000000000100000000000000000",
"0000000000000000000000100000000000000000",
"0000000000000000000000100000000000000000",
"000000000000000000000011111111111111111L",
"0000000000000000000000100000000000000000",
"0000000000000000000000100000000000000000",
"0000000000000000000000100000000000000000",
"0000000000000000000000100000000000000000",
"0000010000000000000000100000000000000000",
"0000010000111111111111100000000000000000",
"0000010000000000100000000000000000000000",
"0000011111000000100000000000000000000000",
"0000000000100000100000000000000000000000",
"0000011111100000100000000000000000000000",
"0000010000000000100000000000000000000000",
"0000011111111111100000000000000000000000",
"0000000000000000100000000000000000000000",
"0000000000000000100000000000000000000000",
"0000000000000000100000000000000000000000",
"0000000000000000111111111111111000000000",
"0000000000000000100000000000001000000000",
"0000000000000000100000000000001000001000",
"0000000000000000000000000000001000001000",
"0000000000000000000000000000001000001000",
"0000000000000000000000000000001111111000",
"0000000000000000000000000000001000000000",
"0000000000000000000000000000001000000000",
"0000000000011111111111111111111100000000",
"0000000000000001000000000000000000000000",
"0000000000000001000000000000000000000000",
"0000000000000001000000000000000000000000",
"0000000000000001000000000000000000000000",
"0000000000000001000000000000000000000000",
"0000000000000001000000000000000000000000",
"0000000000000001000000000000000000000000",
"0001111111111111000000000000000000000000",
"000b000000000000000000000000000000000000",
]


def create_random_obstacles(grid):
    """
    Generates a list that stores a random number tuples that store randomly generated co_ordinates x,y.
    returns a list of tuples that store co_ordinates. 
    """
    lis = []
    
    for y in range(len(grid)):
        for x in range(len(grid[y])):
            char = grid[y][x]
            y_1 = 195 - (y*5)
            x_1 = -100 + (x*5)
            if char == "0":
                coord = (x_1,y_1)
                lis.append(coord)
            
    return lis


def is_position_blocked(x, y):
    """
    Checks if the position is blocked.
    """
    
    obstacles = get_obstacles()
    return True if (x,y) in obstacles else False


def is_path_blocked(x1, y1, x2, y2):
    """Checks if the path-way is blocked
        returns True.
    """
    
    side = (x2[0] + 5)
    top =  (y2[0] + 5)
    
    # Checks which side of the obstacle the robot is and if it wishes to pass through the obstacle
    if (x2[0] < x1 < (x2[0] + 5)) and (y2[0] <= y1 or y1 >= (y2[0] + 5) ) and (y2[1] <= y2[0])  :
        return True
    elif (x2[0] < x1 < (x2[0] + 5)) and ( y2[0] >= y1 or y1 <= (y2[0] + 5)) and  (top <= y2[1]) :
        return True
    elif y2[0] < y1 < (y2[0] + 5) and (x2[0] <= x1  or x1 >= (x2[0] + 5)) and (x2[0] >= x2[1]):
        return True
    elif y2[0] < y1 < (y2[0] + 5) and ( x2[0] >= x1  or x1 <= (x2[0] + 5)) and  (side <= x2[1]):
        return True
    
    
def get_obstacles():
    obstacles = create_random_obstacles(maze)
    return obstacles


if __name__ == "__main__":
    create_random_obstacles(maze)